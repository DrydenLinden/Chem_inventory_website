// this was a first draft not actual production code

-- WRITTEN BY DRYDEN LINDEN-BREMNER 2019-05-16  - 2019-06
-- drydenlb@uvic.ca
-- /////////////// DROP ALL TABLES ///////////////
/*
The following section is a series of drop statements to drop all tables prior to 
re-createing them. The order currently reflects the order needed for foreign key considerations

*/
DROP TABLE RETIRED_EQUIPMENT IF EXISTS;
DROP TABLE FAST_USED_BY IF EXISTS;
DROP TABLE FAST IF EXISTS;

DROP TABLE PARTS_USED IF EXISTS;
DROP TABLE BILLABLE_HOURS IF EXISTS;
DROP TABLE SOFTWARE_FOR_COMPUTERS IF EXISTS;
DROP TABLE SOFTWARE_FOR_PRODUCTS IF EXISTS;
DROP TABLE SUPPLIER_SELLS_PRODUCTS IF EXISTS;
DROP TABLE SUPPLIERS IF EXISTS;
DROP TABLE LOAN_HISTORY IF EXISTS; 

DROP TABLE BILLABLES IF EXISTS;
DROP TABLE MAINTENANCE_REPAIR IF EXISTS;



DROP TABLE SOFTWARE IF EXISTS;
DROP TABLE COMPUTERS IF EXISTS;

DROP TABLE CONSUMABLES IF EXISTS;
DROP TABLE EQUIPMENT IF EXISTS;
DROP TABLE STORAGE IF EXISTS;
DROP TABLE PRODUCTS IF EXISTS;

DROP TABLE PERSON_IN_GROUP;
DROP TABLE PERSON_RUNS_ROOM;
DROP TABLE PERSON_SUPER_GROUP;

DROP TABLE PEOPLE IF EXISTS;
DROP TABLE ROOMS IF EXISTS;
DROP TABLE GROUPS IF EXISTS;


DROP SEQUENCE LOAN_ID_SEQ IF EXISTS;
DROP SEQUENCE MAINTENANCE_ID_SEQ IF EXISTS; 
DROP SEQUENCE BILL_ID_SEQ IF EXISTS;


-- ////// END DROP ALL TABLES //////
-- ///// id SEQUENCES ///////


CREATE SEQUENCE LOAN_ID_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 100000000
CYCLE;

CREATE SEQUENCE MAINTENANCE_ID_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 100000000
CYCLE;

CREATE SEQUENCE BILL_ID_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 100000000
CYCLE;


-- /// END SEQUENCES ///
/* 
TABLE ALIAS LIST: 
PRODUCTS = PROD(4)
SUPPLIERS = SUPP (4)
SUPPLIER_SELLS_PRODUCTS = SSP(1:1:1)
RETIRED = RET (3)
GROUPS = GRP (3)
FAST = FAST (4)
PEOPLE = PPL(3)
PEOPLE_SUPER_GROUP = PSG(1:1:1) 
PEOPLE IN GROUP = PIG(1:1:1) 
FAST_USED_BY = FUB(1:1:1)
ROOMS = ROOMS(5)
STORAGE_LOCATIONS = SLOC(1:3)
PERSON_RUNS_ROOM = PRR(1:1:1)
EQUIPMENT = EQIP (4)
CONSUMABLES = CON(3)
COMPUTERS =COMP(4)
SOFTWARE = SOFT (4)
SOFTWARE-FOR_COMPUTER = SFC(1:1:1)
SOFTWARE_FOR_PRODUCT = SFP(1:1:1)
MAINTENANCE = MAIN (4) 
LOAN_HIATORY = LOHI(2:2)
BILLABLES = BILL (4)
PART_USED = PRTU(3:1)
BILLABLE_HOURS = BHRS (1:3)

*/ 

CREATE TABLE PRODUCTS(
/*
   DRYDEN LINDEN-BREMNER 
   THIS TABLE IS DESIGNED TO STORE INFORMATION ON PRODUCTS THAT WILL BE USED BY MULTIPLE PEICES OF EQUIPMENT SUCH AS WHEN 12 IDENTICAL LENSES ARE BOUGHT OR WHEN 2 LABS 
   OWN THE EXACT SAME PEICE OF EQUIPMENT 
   THE FIELDS USED TO DO THIS ARE; 
   NAME - WHICH IS THE NAME OF THE PRODUCT AS DESCRIBED IE 50MM LENSE FOCAL LENGTH 32 QUALITY 12 OR TESTBENCH 3D MARK PRINTER   
   COST - THE COST OF THE PRODUCT 
   WHIMIS - A LINK TO THE WHIMIS DATA SHEET OR THE PHYSICAL LOCATION OF THE DATA SHEET 
   SERIAL - THE SERIAL NUMBER OF THE PRODUCT 
   SPECIAL STORAGE NOTES - THE LIST OF ANY SPECIAL SOTRAGE CONDTIONS REQUIRED FOR THE PRODUCT COLD WARM ETC  

*/
   PRODUCT_ID VARCHAR2(100) NOT NULL, -- NAME OF THE PRODUCT 
   COST FLOAT,  -- THE COST OF THE PRODUCT
   WHIMIS VARCHAR2(200), --LINK TO A WHIMIS DATASHEET OR TO A 
   SERIAL VARCHAR2(100) UNIQUE, -- THE SERIAL NUMBER OF THE PRODUCT AS INDICATED
   SPECIAL_STORAGE_NOTES VARCHAR2(200), -- LIST ANY SPECIAL CONSIDERATION FOR STORAGE IE REFRIDGERATE ETC 
   PRIMARY KEY (PRODUCT_ID)
); -- END PRODUCTS 

CREATE TABLE SUPPLIERS(
/*
Created by DRYDEN LINDEN-BREMNER 
This table is designed to store a ;ist of all suppliers distributers etc for the purpose of billing and report gereation as well as to allow for faster lookup to purchase common product or chemicals 
PHONE - this stores phone numbers that are just the number with no '-' or spaces 
PK SUPPLIER_ID - name of the supplier or any other identifier that may be used in the end if a non name identifiwer is used then we will need to make a name field 
EMAIL - the email address of the company if applicable with the size set to the max number of chars in an email as defined https://tools.ietf.org/html/rfc5321#section-4.5.3
TYPE_OF_SUPPLLIER os for wether the supplier is a distributer or a OEM 
*/
   PHONE INT, -- THIS WILL BE A 10/11 DIGIT PHONE NUMBER, 
   SUPPLIER_ID VARCHAR2(40), -- NAME OF THE SUPPLIER, THIS MAY NEED TO BE CHANGED TO SOME SORT OF ACCOUNT NUMBER AND NAME MAY NEED TO BE ADDED
   EMAIL VARCHAR2(350), -- THE EMAIL ADRESS OF THE COMPANY NOTE: THE MAXIMUM EMAIL LENGTH IS 325 SO THIS SHOULD LEAVE AMPLE ROOM 
   TYPE_OF_SUPPLIER VARCHAR2(20), --MANUFACTURER , DISTRIBUTER ETC 
   PRIMARY KEY (SUPPLIER_ID)
); -- END SUPPLLIERS 

CREATE TABLE SUPPLIER_SELLS_PRODUCTS(
/*
CREATED BY DRYDEN LINDEN-BREMNER 
THIS TABLE IS TO MODEL THE MANY TO MANY RELATIONSHI BETWEEN SUPPLIERS AND the products they supply 
SSP_PROD_ID- is the foreign key of product used to relate to 
SSP SUPP_ID - which is the suppliers foreign key 
possibly the cost of the product will need to be moved to here 

*/ 
   SSP_PROD_ID VARCHAR2(100), -- NAME OF THE PRODUCT THAT WILL BE SOLD BY THE SUPPLIER 
   SSP_SUPP_ID VARCHAR2(40), -- NAME OF THE SUPPLIER THAT WILL SELL THE PRODUCT 
   -- NOTE MAY BE NESSARY TO ADD SELLER PART NUMBER IF IT DIFFERS FROM THE SERIAL OR SOME SUCH
   FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
   FOREIGN KEY(SUPPLIER_ID) REFERENCES SUPPLIERS(SUPPLIER_ID)
); -- END SSP 

CREATE TABLE RETIRED ( 
/*
CREATED BY DRYDEN LINDEN-BREMNER 

THIS TABLE IS DESIGNED TO MODEL WHEN A PEICE OF EQUIPMENT IS NO LONGER IN USE BECAUSE OF SALE, LACK OF USE MOVED TO SURPLUS ETC AND WHEN AN ITEM IS PUT IN THIS TABLE IT WILL BE DELETED FROM EQUIPMENT and other tables 
RETIRED_ID - the old id number used for the equipment before it was retired  
RET_PROD_ID - is the name of the product that is retired 
REASON - is the reason for retiremnet usech as brocken lack of use liquidation etc 
*/ 
   RETIRED_ID INT NOT NULL, 
   RET_PROD_NAME VARCHAR2(100),
   REASON VARCHAR(200),
   PRIMARY KEY(RETIRED_ID),
   FOREIGN KEY(RET_PROD_ID) REFERENCES PRODUCTS(PRODUCT_ID)
); -- END RETIRED 

CREATE TABLE GROUPS(
/* 
THE GROUPS TABLE IS DESGINED TO MODEL THE RESEARCH GROUPS and ither groups that would possibly require maintenance or sign out a object 
THE GROUP ID - COLOUMN IS USED FOR THE PRIMARY IDENTIFIER OF A GROUP 
THE GROUP NAME - IS USED FOR THE NAME OF THE GROUP IF ID IS NOT THE NAME 
*/ 
   GROUP_ID VARCHAR2(50),
   GROUP_NAME VARCHAR2(30),
   PRIMARY KEY(GROUP_ID)
); -- END GROUPS 

CREATE TABLE FAST(
/* 
THIS TABLE IS DESIGNED TO STORE FAST ACCOUNT NUMBERS AND THE GROUP THAT THE NUMBER CELONGS TO THIS MAY NEED TO BE REVISED 
FAST_ID - IS THE FAST ACCOUNT ID NUMBER OF A GROUP OR INDIVIDUAL PK 
FAST_GRP_ID - IS THE ID OF THE GROUP THAT A FAST ACCOUNT BELONGS TO FK FOR GROUPS  
*/
   FAST_ID VARCHAR(20),
   FAST_GRP_ID VARCHAR2 (50) ,
   PRIMARY KEY(ACCOUNT_ID),
   FOREIGN KEY (FAST_GRP_ID) REFERENCES GROUPS(GROUP_ID)
); -- END FAST 

CREATE TABLE PEOPLE(
/*
THIS TABLE IS FOR THE RECORDING THE USERS OF THE SYSTEM AS WELL AS THERE CONTACT INFORMATION 
PEOPLE_ID IS THE PRIMARY KEY IT CURRENTLY IS THE PERSONS NAME BUT POSSIBLY HAVING IT TIED TO UVIC ID MIGHT MAKE SENSE 
PPL_GRP_ID IS TO BE REMOVED 

*/
   PEOPLE_ID VARCHAR2 (30) NOT NULL, --USER NAME OR UVIC ID NOT SURE WHICH ATM 
   PPL_GRP_ID VARCHAR2(50),
   EMAIL VARCHAR2(350) , -- THE EMAIL ADDRESS OF THE PERSON 
   OFFICE VARCHAR2(100), -- THE OFFICE OF THE PERSON 
   PHONE VARCHAR2(20), -- THE EMAIL ADDRESS OF THE PERSON 
   ROLE VARCHAR2 (15),  
   PRIMARY KEY (PEOPLE_ID)
); -- PEOPLE 

CREATE TABLE PERSON_SUPER_GROUP ( 
   /*
   THIS TABLE IS TO MODEL THE MANY TO MANY RELATIONSHIP BETWEEN PEOPLE AND GROUP WHERE A PERSON IN A GROUP IS A SUPERVISOR 
   PSG_GRP_ID = FOREIGN KEY FOR GROUP 
   PSG_PPL_ID = FOREIGN KEY FOR PEOPLE 
   
   
   */ 
    PSG_PPL_ID VARCHAR2(30),
    PSG_GRP_ID VARCHAR2(50),
    FOREIGN KEY (PSG_GRP_ID) REFERENCES GROUPS(GRP_ID),
    FOREIGN KEY (PSG_PPL_ID) REFERENCES PEOPLE(PEOPLE_ID)

);

CREATE TABLE PERSON_IN_GROUP(
/*
   THIS TABLE IS TO MODEL THE MANY TO MANY RELATIONSHIP BETWEEN PEOPLE AND GROUPS WHERE PEOPLE ARE A PART OF A CERTAIN GROUP AND HAVE THE ABILITY TO SEE OR SIGN OUT THINGS RELATED TO THAT GROUP 
   PIG_GRP_ID = THIS IS THE FOREIGN KEY FOR GROUP 
   PIG_PPL_ID = THIS IS THE FOREIGN JEY FOR PEOPLE 

*/ 
    PIG_PPL_ID VARCHAR2(30),
    PIG_GRP_ID VARCHAR2(50),
    FOREIGN KEY (PIG_GRP_ID) REFERENCES GROUPS(GROUP_ID),
    FOREIGN KEY (PIG_PPL_ID) REFERENCES PEOPLE(PEOPLE_ID)

);

CREATE TABLE FAST_USED_BY(
/*
THIS TABLE IS TO MODEL A MANY TO MANY RELATIONSHIP BETWEEN PEOPLE AND FAST ACCOUNTS WHERE PEOPLE COULD BE AUTHORIZED TO USE MULTIPLE FAST ACCOUNTS AND FAST ACCOUNTS COULD BE USED BY MANY PEOPLE 
FAST ID = FK FROM FAST 
PEOPLE ID = FK FROM PEOPLE 

*/ 
   FAST_ID VARCHAR2(20) NOT NULL,
   PEOPLE_ID VARCHAR2(30) NOT NULL,
   FOREIGN KEY (FAST_ID) REFERENCES FAST(ACCOUNT_ID),
   FOREIGN KEY (PEOPLE_ID) REFERENCES PEOPLE(PEOPLE_ID)
); -- END FAST_USED_BY 

CREATE TABLE ROOMS(
   /*
   THIS TABLE IS TO RECORD THE ROOM/BUILDING THAT AN OBEJECT IS STORED IN AS WEL AS ANY RELEVANT SAFETY INFO SUCH AS WHIMIS WARNINGS OR SAFETY EQUIPMENT REQUIRMENTS 
   ROOM_BUILDING_ID THE BUILDING CODE FOR THE BUILDING USES EVIC OFFICAL ABRIEVITATIONS 
   ROOM_NUMBER_ID THE ROOM NUMBER AS INDICATED ON THE DOOR IF THERE ARE DUPLICATE ROOMS IN A BUILDING THE SUFFIX A,B,C ETC WILL BE USED 
   ROOM_SAFETY_INFO ANY RELEVANT SAFTEY INFO 
   */
   ROOM_NUMBER_ID VARCHAR2(10) NOT NULL, -- THE ROOM NUMBER IF FOR SOME DUMB REASON THERE ARE TWO ROOMS IN THE SAME BUILDING WITH THE SAME NUMBER SUFFIX THE NUMBER WITH A,B ,C ETC 
   ROOM_BUILDING_ID VARCHAR2(5) NOT NULL, -- 
   ROOM_SAFETY_INFO VARCHAR2(200),
   PRIMARY KEY (ROOM_NUMBER_ID,ROOM_BUILDING_ID)
); -- END ROOMS ,

CREATE TABLE STORAGE_LOCATIONS(
   /*
   THIS TABLE IS TO MODEL THE PHYSICAL LOCATION IN A ROOM THAT SOMETHING IS STORED CONSIDERING MAKEING IT A TRIPLE PK WITH ROOM NUMBER AND BUILDING 
   STORAGE_LOCATIOM_ID = PK THE LOCATION SOMETHING IS STORED AT  
   SLOC_ROOM_BUILDING_ID = FK the building id 
   SLOC_ROOM_NUMBER_ID = FK THE ROOM NUMBER 
   */
   STORAGE_LOCATION_ID VARCHAR2(50) NOT NULL, -- THE NAME OF THE CABINET, SHELF , ETC THAT A PRODUCT OR PRODUCTS ARE STORED
   SLOC_ROOM_NUMBER_ID VARCHAR2(10) NOT NULL, -- THE ROOM NUMBER THAT THE LOCATION IS IN 
   SLOC_ROOM_BUILDING_ID VARCHAR2(5) NOT NULL,
   PRIMARY KEY(STORAGE_LOCATION_ID),
   FOREIGN KEY (SLOC_ROOM_NUMBER_ID,SLOC_ROOM_BUILDING_ID) REFERENCES ROOMS(ROOM_NUMBER_ID, ROOM_BUILDING_ID)
);

CREATE TABLE PERSON_RUNS_ROOM(
/*
   THIS TABLE IS TO MODEL THE MANY TO MANY RELATIONSHIP BETWEEN PEOPLE AND ROOMS THIS RELATIONSHIP SHOWS WHEN PEOPLE ARE IN CHARGE OF A ROOM IE LAB MANAGER 
   PRR_PPL_ID = the foreign key for people table 
   PRR_ROOM =  the foreign key for room 
   PRR_BUILDING = the foreign key for room building
*/ 
    PRR_PPL_ID VARCHAR2(30),
    PRR_ROOM VARCHAR2(10),
    PRR_BUILDING VARCHAR2(5),
    FOREIGN KEY (PRR_ROOM,PRR_BUILDING) REFERENCES ROOM(ROOM_NUMBER,ROOM_BUILDING),
    FOREIGN KEY (PRR_PPL_ID) REFERENCES PEOPLE(PEOPLE_ID)


);

CREATE TABLE EQUIPMENT (
/*
   this table is the main table for the database it is designed to store the the inventory with each row being a different object related to the several tables: products , groups, storage , 
   consumables maintenance, loans computers 
   EQUIPMENT_ID = The id for a piece of equipment this will be a barcode or nfc code on the object PK 
   
   EQIP_GRP_OWNER_ID = This is the foreign key for the group table specifically for the owner 
   EQIP_GRP_MANAGED_ID = This is the foreign key for  groups for the current managing group 
   EQIP_SLOC_ID = The foreign key for the location table 
   EQIP_PROD_ID = The foreign key for product, contains its product information is 
   
   NOTES = ANY NOTES ABOUT THIS PEICE OF THE EQUIPMENT 
   UVIC_ASSET_NUMBER = ITS UVIC ASSET NUMBER IF APPLICABLE 
   STATUS = LOANED OUT, BROCKEN ETC IN USE 
*/
   EQUIPMENT_ID VARCHAR2(30) NOT NULL, -- THE IDENTIFICATION NUMBER SCANNED BY A SCANNER
   PRIMARY KEY (EQUIPMENT_ID),
   
   EQIP_GRP_OWNER_ID VARCHAR2(100), -- THE GROUP WHO THE EQUIPMENT IS OWNED BY
   EQIP_GRP_MANAGED_ID VARCHAR2(100), -- GROUP IN CHARGE OF EQUIPMENT
   EQIP_SLOC_ID VARCHAR2(50), --THE CABINET WHERE SOMETHING IS STORED 
   EQIP_PROD_ID VARCHAR2(100), -- THE NAME OF THE PRODUCT THAT THIS EQUIPMENT IS 
   
   NOTES VARCHAR2(2500), -- ANY NOTES FOR THE EQUIPMENT
   UVIC_ASSET_NUMBER VARCHAR2(15), -- THE ASSET NUMBER USED BY UVIC 
   STATUS VARCHAR2(50), --FIXED STATUS'S SUCH AS WORKING BROCKEN IN MAINTENANCE 
   
   FOREIGN KEY (EQIP_PROD_ID) REFERENCES PRODUCTS(PRODUCT_ID), 
   FOREIGN KEY (EQIP_GRP_OWNER_ID) REFERENCES GROUPS(GROUP_ID),
   FOREIGN KEY (EQIP_GRP_MANAGED_ID) REFERENCES GROUPS(GROUP_ID),
   FOREIGN KEY (EQIP_SLOC_ID) REFERENCES STORAGE(STORAGE_ID)
);

CREATE TABLE CONSUMABLES (
/*
THIS TABLE ALLOWS FOR EQUIPMENT TO HAVE CONSUMABLE QUANTITYS AS WELL AS COST FOR THE QUANTITY 
CONSUMABLE_ID  = THE ID OF THE EQUIPMENT 
QUANTITY = THE AMOUNT OF THE SUBSTANCE 
UNIT = THE UNIT THAT QUANTITY IS MEASURED IN IE G, METERS , ETC 
COST_PER_UNIT = THE COST OF 1 UNIT OF THE THING 
*/ 
   CONSUMABLE_ID VARCHAR2(30) NOT NULL,
   QUANTITY FLOAT,
   UNIT VARCHAR2(6),
   COST_PER_UNIT FLOAT,
   PRIMARY KEY (CONSUMABLE_ID),
   FOREIGN KEY (CONSUMABLE_ID) REFERENCES EQUIPMENT(EQUIPMENT_ID)
);

CREATE TABLE COMPUTERS(
/*
IF A PEICE OF EQUIPMENT IS A COMPUTER THIS TABLE WILL BE USED TO STORE COMPUTER DETAILS IF A COMPUTER IS USED ON PEICE OF EQUIPMENT THEN IT WILL BE ADDED TO THE MANY TO MANY TABLE 
COMPUTER ID IS THE EQUIPMENT ID 
OS = THE OS OF THE COMPUTER 
COMP_SLOC_ID = LOCATION OF THE COMPUTER 
*/ 
   COMPUTER_ID VARCHAR2(30) NOT NULL, -- THE UNIQUE ID FOR A COMPUTER TO IDENTIFY IT MAY BE A BARCODE/ RFID CHIP 
   OS VARCHAR2(50),
   COMP_SLOC_ID VARCHAR2(50), -- THE PEICE OF EQUIPMENT THIS COMPUTER IS USED FOR 
   PRIMARY KEY(COMPUTER_ID),
   FOREIGN KEY(COMPUTER_ID) REFERENCES EQUIPMENT(EQUIPMENT_ID),
   FOREIGN KEY(COMP_SLOC_ID) REFERENCES STORAGE(STORAGE_LOCATION_ID)
); 

CREATE TABLE SOFTWARE ( 
/*
this table tracks what software we have because of the lack of a physical location of software and the need to track very litte about it this table does not work nicely as a part of equipment
the primary keys are software name and software version when used to gethor 
user manual is either a lijnk or the physical loacation of a iser manual 
*/
   SOFTWARE_NAME_ID VARCHAR2(50),
   SOFTWARE_VERSION_ID VARCHAR2(10),
   USER_MANUAL VARCHAR2(100),
   
   PRIMARY KEY (SOFTWARE_NAME_ID, SOFTWARE_VERSION_ID)
);

CREATE TABLE SOFTWARE_FOR_COMPUTERS(
/*
this table is the many to many relationship relating computers and software 
SFC_COMP_ID THE FK FOR COMPUTER 
SFC_SOFT_NAME THE NAME FOR SOFTWARE FK '
SFC_SOFT_VERSION THE VERSION FOR SOFTWARE FK 

*/
   SFC_COMP_ID VARCHAR2(30) NOT NULL, 
   SFC_SOFT_NAME VARCHAR2(50) NOT NULL, 
   SFC_SOFT_VERSION VARCHAR2(10) NOT NULL, 

   PRIMARY KEY(SFC_COMP_ID,SFC_SOFT_NAME,SFC_SOFT_VERSION),
   FOREIGN KEY (SFC_SOFT_NAME,SFC_SOFT_VERSION) REFERENCES SOFTWARE(SOFTWARE_NAME_ID,SOFTWARE_VERSION_ID),
   FOREIGN KEY (SFC_COMP_ID) REFERENCES COMPUTERS(COMPUTER_ID)
);

CREATE TABLE SOFTWARE_FOR_PRODUCTS(
/*
this table models the many to many relationship between software and the product that the software is used with. 
the variables are 
SFP_SOFT_NAME = FOREIGN KEY FOR SOFTWARE NAME 
SFP_SOFT_VERSION = FK FOR SOFTWARE VERSION 
SFP_PROD_NAME = FK FOR PRODUCT 
*/
   SFP_SOFT_NAME VARCHAR2(50) ,
   SFP_SOFT_VERSION VARCHAR2(10) ,
   SFP_PROD_NAME VARCHAR2(100),

   PRIMARY KEY (SFP_SOFT_NAME, SFP_PROD_NAME),
   FOREIGN KEY (SFP_PROD_NAME) REFERENCES PRODUCT(PRODUCT_ID),
   FOREIGN KEY (SFP_SOFT_NAME,SFP_SOFT_VERSION) REFERENCES SOFTWARE(SOFTWARE_NAME_ID,SOFTWARE_VERSION_ID)
);

CREATE TABLE MAINTENANCE(
/*
this table is used as a maintenance log for work history for repairs and maintenance \
MAINTENANCE_ID = THE AUTO GENERATED ID FOR MAINTENANCE
INITIAL ISSUE = THE ISSUES AS REPORTED 
WORK HISTORY = A LOG OF THE WORK DONE DURING THIS MAINTENACE 
MAIN RESULT = THE RESULT OF THE REPAIR/MAINTNENANCE 
START DATE = THE START DATE FOR THE MAINTENANCE 
EXPECTED END = THE EXPECTED END DAT 
ACTUAL END DATE = THE DATE WHEN EQUIPMENT IS FINISHED ITS REPAIRS 
STATUS = IS THE CURRENT STATUS OF MAINTENANCE 
   MAIN_EQIP_ID - FK EQUIPMENT 
   MAIN_GRP_ID -FK GROUP 
   MAIN_PPL_ID -FK PEOPLE THE PERSON TO CONTACT 
*/ 
   MAINTENANCE_ID INT NOT NULL, --PK
   
   INITIAL_ISSUE VARCHAR2(500),  -- THIS IS WHAT WOULD BE ENTERED BY THE MAINTENANCE REQUESTER 
   WORK_HISTORY VARCHAR2(2500), -- THIS IS FOR THE WORK HISTORY AS FILLED IN BY THE PERFORMER OF THE MAINTENANCE 
   MAIN_RESULT VARCHAR (20), -- SUCCESS ? FAILURE? 
   START_DATE TIMESTAMP, -- WHEN ITS STARTED OR SCHEDUALED TO BE STARTED 
   EXPECTED_END_DATE TIMESTAMP, -- WHAT DAY THE MAINTENANCE IS SHCEHDUALED TO END FOR SCHEDUALING PURPOSES 
   ACTUAL_END_DATE TIMESTAMP, -- THE DAY THE MAINTENANCE IS COMPLETED 
   STATUS VARCHAR2(30), -- IS THE MAINTENANCE ONGOING?DONE?SCHEDULED? TBD?
   TYPE_OF_MAINTENANCE VARCHAR2(30), -- WHAT TYPE OF MAINTENANCE IS SOMETHING IE 
   
   MAIN_EQIP_ID VARCHAR2(30), -- the equipment maintenance is being performed on 
   MAIN_GRP_ID VARCHAR2(50), -- the group that the work 
   MAIN_PPL_ID VARCHAR2(50), -- point of contact 
  
   PRIMARY KEY (MAINTENANCE_ID), 
   FOREIGN KEY (MAIN_GRP_ID) REFERENCES GROUPS(GROUP_ID), -- THE GROUP THE MAINTENANCE IS FOR 
   FOREIGN KEY (MAIN_PPL_ID) REFERENCES PEOPLE(PEOPLE_ID), -- the point of contact 
   FOREIGN KEY (MAIN_EQIP_ID) REFERENCES EQUIPMENT(EQUIPMENT_ID)
);

CREATE TABLE LOAN_HISTORY(
/*


*/
   LOAN_ID INT NOT NULL,
   LOAN_GROUP_ID VARCHAR2(50), 
   LOAN_PPL_ID VARCHAR2(50),
   LOAN_EQIP_ID VARCHAR2(30),
   TIME_SIGNED_OUT TIMESTAMP,
   TIME_SIGNED_IN TIMESTAMP,
   STATUS_OF_LOAN VARCHAR2(20), -- COMPLETED? NOT SIGNED OUT YET?
   
   PRIMARY KEY(LOAN_ID),
   FOREIGN KEY(LOAN_GROUP_ID) REFERENCES GROUPS(GROUP_ID),
   FOREIGN KEY(LOAN_PPL_ID) REFERENCES PEOPLE(PEOPLE_ID),
   FOREIGN KEY(LOAN_EQIP_ID) REFERENCES EQUIPMENT(EQUIPMENT_ID)
);

CREATE TABLE BILLABLES(
   BILL_ID INT NOT NULL,
   BILL_MAIN_ID INT NOT NULL ,
   PRIMARY KEY (BILL_ID) ,
   FOREIGN KEY (BILL_MAIN_ID) REFERENCES MAINTENANCE(MAINTENANCE_ID)
);

CREATE TABLE PARTS_USED(
   PRTU_EQIP_ID VARCHAR2(30) NOT NULL,
   PRTU_BILL_ID INT,
   PRTU_COST FLOAT,
   PRIMARY KEY (PRTU_EQIP_ID, PRTU_BILL_ID),
   FOREIGN KEY (PRTU_BILL_ID) REFERENCES BILLABLES(BILL_ID),
   FOREIGN KEY (PRTU_EQIP_ID) REFERENCES EQUIPMENT(EQUIPMENT_ID)
);

CREATE TABLE BILLABLE_HOURS(
   BHRS_ID INT NOT NULL,
   BHRS_BILL_ID INT,
   COST_PER_HOUR FLOAT,
   HOURS_WORKED FLOAT,
   BHRS_PEOPLE_ID VARCHAR2(40),
   PRIMARY KEY (HRS_WORK_ID),
   FOREIGN KEY (BHRS_BILL_ID) REFERENCES BILLABLES(BILL_ID),
   FOREIGN KEY (BHRS_PEOPLE_ID) REFERENCES PEOPLE(PEOPLE_ID)
);
